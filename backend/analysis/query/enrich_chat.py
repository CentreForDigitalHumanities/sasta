from typing import List
from analysis.models import AssessmentMethod, Transcript
from analysis.results.results import AllResults
from convert.chat_reader import ChatDocument
from chamd.chat_reader import ChatHeader, ChatTier, ChatLine
import itertools
from operator import attrgetter


def find_doc_line(lines: List[ChatLine], uttid):
    # TODO: more efficient way to do this?
    return next((x for x in lines if x.uttid == uttid), None)


def enrich_chat(transcript: Transcript,
                allresults: AllResults,
                method: AssessmentMethod) -> ChatDocument:
    doc = ChatDocument.from_chatfile(transcript.content.path)

    items = sorted(allresults.annotations.items())
    for utt_id, words in items:
        doc_line = find_doc_line(doc.lines, utt_id)
        flattened_hits = itertools.chain(*(w.hits for w in words))
        annotations = [x.get('item') for x in flattened_hits]
        if annotations:
            annotation_str = ', '.join(annotations)
            doc_line.tiers['xsyn'] = ChatTier(id='xsyn', text=annotation_str)
    # id_headers = [h for h in doc.headers if h.line.startswith('@ID')]
    # last_id_header = max(id_headers, key=attrgetter('linestartno'))
    # doc.headers.append(ChatHeader(
    #     line=f'@Comment:\tAnnotations on %xsyn-tiers generated by SASTA, using {method.category.name}',
    #     linestartno=last_id_header.linestartno+1))

    return doc
